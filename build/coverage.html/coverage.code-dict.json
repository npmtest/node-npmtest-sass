{"/home/travis/build/npmtest/node-npmtest-sass/test.js":"/* istanbul instrument in package npmtest_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass/lib.npmtest_sass.js":"/* istanbul instrument in package npmtest_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sass = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sass = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sass/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sass && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sass\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sass.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sass.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sass.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sass.__dirname +\n                    '/lib.npmtest_sass.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass/node_modules/sass/lib/sass.js":"\n// Sass - Core - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\n/**\n * Library version.\n */\n\nexports.version = '0.5.0'\n\n/**\n * Compiled sass cache.\n */\n \nvar cache = {}\n\n/**\n * Sass grammar tokens.\n */\n\nvar tokens = [\n  ['indent', /^\\n +/],\n  ['space', /^ +/],\n  ['nl', /^\\n/],\n  ['js', /^{(.*?)}/],\n  ['comment', /^\\/\\/(.*)/],\n  ['string', /^(?:'(.*?)'|\"(.*?)\")/],\n  ['variable', /^!([\\w\\-]+) *= *([^\\n]+)/], \n  ['variable.alternate', /^([\\w\\-]+): +([^\\n]+)/], \n  ['property.expand', /^=([\\w\\-]+) *([^\\n]+)/], \n  ['property', /^:([\\w\\-]+) *([^\\n]+)/], \n  ['continuation', /^&(.+)/],\n  ['mixin', /^\\+([\\w\\-]+)/],\n  ['selector', /^(.+)/]\n]\n\n/**\n * Vendor-specific expansion prefixes.\n */\n\nexports.expansions = ['-moz-', '-webkit-']\n\n/**\n * Tokenize the given _str_.\n *\n * @param  {string} str\n * @return {array}\n * @api private\n */\n\nfunction tokenize(str) {\n  var token, captures, stack = []\n  while (str.length) {\n    for (var i = 0, len = tokens.length; i < len; ++i)\n      if (captures = tokens[i][1].exec(str)) {\n        token = [tokens[i][0], captures],\n        str = str.replace(tokens[i][1], '')\n        break\n      }\n    if (token)\n      stack.push(token),\n      token = null\n    else \n      throw new Error(\"SyntaxError: near `\" + str.slice(0, 25).replace('\\n', '\\\\n') + \"'\")\n  }\n  return stack\n}\n\n/**\n * Parse the given _tokens_, returning\n * and hash containing the properties below:\n *\n *   selectors: array of top-level selectors\n *   variables: hash of variables defined\n *\n * @param  {array} tokens\n * @return {hash}\n * @api private\n */\n\nfunction parse(tokens) {\n  var token, selector,\n      data = { variables: {}, mixins: {}, selectors: [] },\n      line = 1,\n      lastIndents = 0,\n      indents = 0\n  \n  /**\n   * Output error _msg_ in context to the current line.\n   */\n      \n  function error(msg) {\n    throw new Error('ParseError: on line ' + line + '; ' + msg)\n  }\n  \n  /**\n   * Reset parents until the indentation levels match.\n   */\n  \n  function reset() {\n    if (indents === 0) \n      return selector = null\n    while (lastIndents-- > indents)\n      selector = selector.parent\n  }\n\n  /**\n   * Replaces variables and literal javascript in the input.\n   */\n\n  function performSubstitutions(input) {\n    return input.replace(/!([\\w\\-]+)/g, function(orig, name){\n      return data.variables[name] || orig\n    })\n    .replace(/\\{(.*?)\\}/g, function(_, js){\n      with (data.variables){ return eval(js) }\n    })\n  }\n  \n  // Parse tokens\n  \n  while (token = tokens.shift())\n    switch (token[0]) {\n      case 'mixin':\n        if (indents) {\n          var mixin = data.mixins[token[1][1]]\n          if (!mixin) error(\"mixin `\" + token[1][1] + \"' does not exist\")\n          selector.adopt(mixin.copy())\n        }\n        else\n          data.mixins[token[1][1]] = selector = new Selector(token[1][1], null, 'mixin')\n        break\n      case 'continuation':\n        reset()\n        selector = new Selector(token[1][1], selector, 'continuation')\n        break\n      case 'selector':\n        reset()\n        selector = new Selector(token[1][1], selector)\n        if (!selector.parent) \n          data.selectors.push(selector)\n        break\n      case 'property':\n        reset()\n        if (!selector) error('properties must be nested within a selector')\n        var val = performSubstitutions(token[1][2])\n        selector.properties.push(new Property(token[1][1], val))\n        break\n      case 'property.expand':\n        exports.expansions.forEach(function(prefix){\n          tokens.unshift(['property', [, prefix + token[1][1], token[1][2]]])\n        })\n        break\n      case 'variable':\n      case 'variable.alternate':\n        var val = performSubstitutions(token[1][2])\n        data.variables[token[1][1]] = val\n        break\n      case 'js':\n        with (data.variables){ eval(token[1][1]) }\n        break\n      case 'nl':\n        ++line, indents = 0\n        break\n      case 'comment':\n        break\n      case 'indent':\n        ++line\n        lastIndents = indents,\n        indents = (token[1][0].length - 1) / 2\n        if (indents > lastIndents &&\n            indents - 1 > lastIndents)\n              error('invalid indentation, to much nesting')\n    }\n  return data\n}\n\n/**\n * Compile _selectors_ to a string of css.\n *\n * @param  {array} selectors\n * @return {string}\n * @api private\n */\n\nfunction compile(selectors) {\n  return selectors.join('\\n')\n}\n\n/**\n * Collect data by parsing _sass_.\n * Returns a hash containing the following properties:\n *\n *   selectors: array of top-level selectors\n *   variables: hash of variables defined\n *\n * @param  {string} sass\n * @return {hash}\n * @api public\n */\n\nexports.collect = function(sass) {\n  return parse(tokenize(sass))\n}\n\n/**\n * Render a string of _sass_.\n *\n * Options:\n *   \n *   - filename  Optional filename to aid in error reporting\n *   - cache     Optional caching of compiled content. Requires \"filename\" option\n *\n * @param  {string} sass\n * @param  {object} options\n * @return {string}\n * @api public\n */\n\nexports.render = function(sass, options) {\n  options = options || {}\n  if (options.cache && !options.filename)\n    throw new Error('filename option must be passed when cache is enabled')\n  if (options.cache)\n    return cache[options.filename]\n      ? cache[options.filename]\n      : cache[options.filename] = compile(exports.collect(sass).selectors)\n  return compile(exports.collect(sass).selectors)\n}\n\n// --- Selector\n\n/**\n * Initialize a selector with _string_ and\n * optional _parent_.\n *\n * @param  {string} string\n * @param  {Selector} parent\n * @param  {string} type\n * @api private\n */\n\nfunction Selector(string, parent, type) {\n  this.string = string\n  if (parent) {\n    parent.adopt(this)\n  } else {\n    parent = null\n  }\n  this.properties = []\n  this.children = []\n  this.type = type\n  if (type) this[type] = true\n}\n\n/**\n * Return a copy of this selector.  Children and properties will be recursively\n * copied.\n *\n * @return {Selector}\n * @api private\n */\n\nSelector.prototype.copy = function() {\n  var copy = new Selector(this.string, this.parent, this.type)\n  copy.properties = this.properties.map(function(property) {\n    return property.copy()\n  })\n  this.children.map(function(child) {\n    copy.adopt(child.copy())\n  })\n  return copy\n}\n\n/**\n * Sets this selector to have no parent.\n *\n * @api private\n */\n\nSelector.prototype.orphan = function() {\n  if (this.parent) {\n    var index = this.parent.children.indexOf(this)\n    if (index !== -1) {\n      this.parent.children.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Set another selector as one of this selector's children.\n *\n * @api private\n */\n\nSelector.prototype.adopt = function(selector) {\n  selector.orphan()\n  selector.parent = this\n  this.children.push(selector)\n}\n\n/**\n * Return selector string.\n *\n * @return {string}\n * @api private\n */\n\nSelector.prototype.selector = function() {\n  var selector = this.string\n  if (this.parent)\n    selector = this.continuation\n      ? this.parent.selector() + selector\n      : this.mixin\n        ? this.parent.selector()\n        : this.parent.selector() + ' ' + selector\n  return selector\n}\n\n/**\n * Return selector and nested selectors as CSS.\n *\n * @return {string}\n * @api private\n */\n\nSelector.prototype.toString = function() {\n  return (this.properties.length\n      ? this.selector() + ' {\\n' + this.properties.join('\\n') + '}\\n'\n      : '') + this.children.join('')\n}\n\n// --- Property\n\n/**\n * Initialize property with _name_ and _val_.\n *\n * @param  {string} name\n * @param  {string} val\n * @api private\n */\n\nfunction Property(name, val) {\n  this.name = name\n  this.val = val\n}\n\n/**\n * Return a copy of this property.\n *\n * @return {Property}\n * @api private\n */\n\nProperty.prototype.copy = function() {\n  return new Property(this.name, this.val);\n}\n\n/**\n * Return CSS string representing a property.\n *\n * @return {string}\n * @api private\n */\n\nProperty.prototype.toString = function() {\n  return '  ' + this.name + ': ' + this.val + ';'\n}\n","/home/travis/build/npmtest/node-npmtest-sass/node_modules/sass/lib/._sass.js":"\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000�@�\u0000\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\"\u0000\u0000\u0015com.macromates.caret\u0000{\n    column = 24;\n    line = 7;\n}","/home/travis/build/npmtest/node-npmtest-sass/node_modules/sass/spec/node.js":"\nrequire.paths.unshift('spec', 'spec/lib', 'lib')\nrequire('jspec')\nsass = require('sass')\n\nJSpec\n  .exec('spec/spec.core.js')\n  .run({ reporter: JSpec.reporters.Terminal, fixturePath: 'spec/fixtures', failuresOnly: true })\n  .report()\n","/home/travis/build/npmtest/node-npmtest-sass/node_modules/sass/spec/spec.core.js":"\ndescribe 'Sass'\n  before\n    render = function(path, options) {\n      return sass.render(fixture(path + '.sass'), options)\n    }\n    \n    expected = function(path) {\n      return fixture(path + '.css')\n    }\n    \n    assert = function(path, options) {\n      render(path, options).should.eql expected(path)\n    }\n  end\n  \n  describe '.version'\n    it 'should be a triplet'\n      sass.version.should.match(/^\\d+\\.\\d+\\.\\d+$/)\n    end\n  end\n  \n  describe '.render()'\n    describe 'with \"cache\" enabled'\n      describe 'without \"filename\"'\n        it 'should throw an error'\n          -{ assert('selectors', { cache: true }) }.should.throw_error 'filename option must be passed when cache is enabled'\n        end\n      end\n      \n      describe 'with \"filename\"'\n        it 'should still work'\n          assert('selectors', { cache: true, filename: 'style.sass' })\n        end\n      end\n    end\n  \n    it 'should support complex selectors'\n      assert('selectors')\n    end\n    \n    describe '// ...'\n      it 'should be a sass-specific comment'\n        assert('comment')\n      end\n    end\n    \n    describe '& ...'\n      it 'should continue a selector'\n        assert('continuation')\n      end\n    end\n  \n    describe '{...}'\n      it 'should have access to variables'\n        assert('literal')\n      end\n    end\n    \n    describe ':key val'\n      it 'should define a property'\n        assert('properties')\n      end\n      \n      describe 'when nested'\n        it 'should traverse correctly'\n          assert('properties.nested')\n        end\n        \n        describe 'incorrectly'\n          it 'should throw an error'\n            try { assert('properties.nested.invalid') }\n            catch (e) {\n              e.message.should.eql 'ParseError: on line 3; invalid indentation, to much nesting'\n            }\n          end\n        end\n      end\n      \n      describe 'when at the top level'\n        it 'should throw an error'\n          try { assert('properties.invalid') }\n          catch (e) {\n            e.message.should.eql 'ParseError: on line 1; properties must be nested within a selector'\n          }\n        end\n      end\n    end\n    \n    describe '=:key val'\n      it 'should expand to -{moz, webkit}-border-radius'\n        assert('properties.expand')\n      end\n    end\n    \n    describe '!key = val'\n      it 'should define a variable'\n        assert('variables.regular')\n      end\n    end\n    \n    describe '!key1 = !key2'\n      it 'should reference a previously-defined variable'\n        assert('variables.dependent')\n      end\n    end\n    \n    describe 'key: val'\n      it 'should define a variable'\n        assert('variables.alternate')\n      end\n    end\n  end\n  \n  describe '+mixin'\n    it 'should create a mixin'\n      assert('mixin')\n    end\n    \n    it 'should create multiple appropriate mixins'\n      assert('mixin.multiple')\n    end\n    \n    describe 'when the mixin does not exist'\n      try { assert('mixin.undefined') }\n      catch (e) {\n        e.message.should.eql 'ParseError: on line 2; mixin `large\\' does not exist'\n      }\n    end\n  end\n  \n  describe '.collect()'\n    it 'should return variables defined'\n      var collected = sass.collect(fixture('collect.sass'))\n      collected.variables.should.eql { red: '#ff0000', black: '#000' }\n    end\n    \n    it 'should return mixins defined'\n      var collected = sass.collect(fixture('mixin.sass'))\n      collected.mixins.should.have_property 'large'\n      collected.mixins.should.have_property 'striped'\n    end\n  end\nend\n"}